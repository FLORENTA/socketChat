<% include includes/header.ejs %>
<body>
    <% include includes/navigation_bar.ejs %>

    <ul id="connected_members"></ul>

    <div class="container">
        <div id="messages_list"></div>

        <form id="send_message">
            <label for="picture"></label>
            <input type="file" id="picture" name="picture" />
            <input type="text" name="message" id="post_message" />
            <input type="submit" class="btn blue margin0" id="submit" value="" />
        </form>
    </div>

    <div id="people"></div>
    <script type="text/javascript" src="/js/style.js"></script>

    <script src="/socket.io/socket.io.js"></script>
    <script src="/siofu/client.js"></script>
    <script type="text/javascript">

    /* Function to insert the messages (all from scratch and one by one) */

    function scrollToBottom() {
        messagesList.scrollTop = messagesList.lastElementChild.offsetTop;
    }

    function appendNewMessage(message, index){

        var divElt = document.createElement("div");
        divElt.className = "message";

        var pseudoElt = document.createElement("b");
        pseudoElt.textContent = message.username + " le " + message.date;

        var messageElt = document.createElement("p");
        messageElt.textContent = message.message;

        divElt.appendChild(pseudoElt);
        divElt.appendChild(messageElt);

        /* Check if a new message or loading a list when joining the page */

        if(index !== "new"){

            if(index % 2 !== 0){

                divElt.style.alignSelf = "flex-end";
                divElt.style.backgroundColor = "#777";

            }
        }
        else{

            /* Check if the lastElementChild index is pair or no */

            if((messagesList.childNodes.length) % 2 !== 0 ){

                divElt.style.alignSelf = "flex-end";
                divElt.style.backgroundColor = "#777";
            }
            else{

                divElt.style.alignSelf = "flex-start";
            }
        }

        messagesList.appendChild(divElt);

    }

    /* To add a user to the list */

    function appendNewMember(member){

        var liElt = document.createElement("li");

        /* Prevent setting an id for the current member so that he
           cannot create a discussion with themselves
        */

        if(member.token !== "<%= token %>"){

            liElt.setAttribute("id", member.token);

        }
        else{

            liElt.style.cursor = "default";

        }

        if(member.connected === 0){

            liElt.style.color = "#777";
            liElt.textContent = member.username + " (Hors-ligne)";

        }
        else{

            liElt.style.color = "#4169e1";
            liElt.style.fontWeight = "600";
            liElt.textContent = member.username + " (En ligne)";

        }

        liElt.addEventListener("click", function(e){

            /* if the clicked member within the list has an id */

            if(e.target.getAttribute("id")){

                socket.emit("private_discussion", e.target.getAttribute("id"));

            }

        });

        membersList.appendChild(liElt);
    }

    /* Connexion au serveur */

    var socket = io.connect('http://localhost:8000');

    /* Selectors */

    var formElt = document.querySelector("form");
    var messagesList = document.getElementById("messages_list");
    var membersList = document.getElementById("connected_members");

    /* When the form is submitted */

    function sendData(e){

        e.preventDefault();

        var inputValue = this.elements.message.value;
        var file = this[0].files[0];

        var fileReader = new FileReader();
        var slice = file.slice(0, 100000);

        console.log(slice);

        fileReader.readAsArrayBuffer(slice);
        fileReader.addEventListener("load", function(e){
            var arrayBuffer = fileReader.result;

            socket.emit("sliced_picture", {
                name: file.name,
                type: file.type,
                size: file.size,
                data: arrayBuffer
            });
        })

        socket.on("give_me_another_slice", function(currentSlice){
            var place = currentSlice.currentSlice * 100000;

            // Math.min() shows the smallest figure in a series of figures
            slice = file.slice(place, place * Math.min(100000, file.size - place));

            fileReader.readAsArrayBuffer(slice);
        });

        if(privateDiscussionToken){
            socket.emit("new_message", {
                message : inputValue,
                privateDiscussionToken :
                privateDiscussionToken
            });
        }
        else{
            socket.emit("new_message", {
                message: inputValue
            });
        }

        this.elements.message.value = "";
    }

    /* Event Listener on form submission */

    formElt.addEventListener("submit", sendData);

    /* Waiting for the list of all messages stored in database */

    socket.on("all_messages", function(messages){

        messages.forEach(function(message, index){
            appendNewMessage(message, index);
        });

        if(messages.length > 0){
            scrollToBottom();
        }
    });

    /* Waiting for any new message */

    socket.on("new_message", function(message){
        appendNewMessage(message, "new");

        /* Go to the bottom of the list */
        scrollToBottom();
    });

    /* Once discussion token received, let's redirect to the private discussion */

    socket.on("private_discussion_token", function(privateDiscussionToken){

        window.location = "/chat/private/" + privateDiscussionToken;

    });

    var locationElt = "<%= path %>";

    /* Starts at index 14 of path */

    var privateDiscussionToken = locationElt.substr(14);

    if (typeof (privateDiscussionToken) !== "undefined" && privateDiscussionToken.length > 0){

        socket.emit("init", {
            token: "<%= token %>",
            username : "<%= username %>",
            chat: true,
            privateDiscussionToken : privateDiscussionToken
        });

        /* Must listen for members connections on this specific discussion */
        var prefix = "connected_members_private_";
        var path = prefix.concat(privateDiscussionToken);

        socket.on(path, function (members) {

            while (membersList.lastElementChild) {
                membersList.removeChild(membersList.lastElementChild);
            }

            members.forEach(function (member) {
                appendNewMember(member);
            });

        });
    }
    else{

        socket.emit("init", {
            token: "<%= token %>",
            username : "<%= username %>",
            chat: true
        });

        /* Waiting for the list of pseudos of all members connected */

        socket.on("connected_members", function (members) {

            while (membersList.lastElementChild) {
                membersList.removeChild(membersList.lastElementChild);
            }

            members.forEach(function (member) {
                appendNewMember(member);
            });

        });
    }

    </script>
</body>
</html>


